{"version":3,"file":"static/js/512.007ef652.chunk.js","mappings":"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","sources":["worker.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { Chess } from 'chess.js';\n\n/*\n * Fisherâ€“Yates\n */\nfunction shuffle(array) {\n    let currentIndex = array.length;\n  \n    while (currentIndex != 0) {\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n/*\n * Evaluates a board position by adding up the values of each piece on the board.  Positive values\n * favor white and negative values favor black.\n */\nexport function evaluate(chessjs) {\n    const values = {'p': -1, 'n': -3, 'b': -3, 'r': -5, 'q': -9, 'P': 1, 'N': 3, 'B': 3, 'R': 5, 'Q': 9};\n\n    const fen = chessjs.fen();\n\n    let value = 0;\n    for (let i=0; i<fen.indexOf(\" \"); i++) {\n        if (values[fen.charAt(i)]) {\n            value += values[fen.charAt(i)];\n        }\n    }\n\n    return value;\n}\n\n/*\n * Implements the minimax search algorithm, where white is the maximizing player and black is the\n * minimizing player.\n */\nexport function minimax(chessjs, initialDepth, currentDepth, maximizingPlayer) {\n    let best = [];\n    let evaluations = 0;\n\n    if (currentDepth === 0) {\n        let score = evaluate(chessjs);\n        return {score: score, best: best, evaluations: 1};\n    }\n\n    const moves = shuffle(chessjs.moves({verbose: true}));\n\n    if (maximizingPlayer) {\n        let max = Number.NEGATIVE_INFINITY;\n        for (let i=0; i < moves.length; i++) {\n            chessjs.move(moves[i]);\n            let result = minimax(chessjs, initialDepth, currentDepth-1, false);\n            let score = result.score;\n            evaluations += result.evaluations;\n            chessjs.undo();\n\n            if (score > max) {\n                max = score;\n                best = [];\n                best.push(moves[i]);\n            }\n            else if (score === max) {\n                best.push(moves[i]);\n            }\n        }\n\n        return {score: max, best: best, evaluations: evaluations};\n    }\n    else {\n        let min = Number.POSITIVE_INFINITY;\n        for (let i=0; i < moves.length; i++) {\n            chessjs.move(moves[i]);\n            let result = minimax(chessjs, initialDepth, currentDepth-1, true);\n            let score = result.score;\n            evaluations += result.evaluations;\n            chessjs.undo();\n\n            if (score < min) {\n                min = score;\n                best = [];\n                best.push(moves[i]);\n            }\n            else if (score === min) {\n                best.push(moves[i]);\n            }\n        }\n\n        return {score: min, best: best, evaluations: evaluations};\n    }\n}\n\n/*\n * Implements the minimax search algorithm with alpha beta pruning.\n */\nexport function alphabeta(chessjs, initialDepth, currentDepth, maximizingPlayer, alpha, beta) {\n    let best = [];\n    let evaluations = 0;\n\n    if (currentDepth === 0) {\n        let score = evaluate(chessjs);\n        return {score: score, best: best, evaluations: 1};\n    }\n\n    const moves = shuffle(chessjs.moves({verbose: true}));\n\n    if (maximizingPlayer) {\n        let max = Number.NEGATIVE_INFINITY;\n        for (let i=0; i < moves.length; i++) {\n            chessjs.move(moves[i]);\n            let result = alphabeta(chessjs, initialDepth, currentDepth-1, false, alpha, beta);\n            let score = result.score;\n            evaluations += result.evaluations;\n            chessjs.undo();\n\n            if (score > max) {\n                max = score;\n                best = [];\n                best.push(moves[i]);\n            }\n            /*else if (score === max) {\n                best.push(moves[i]);\n            }*/\n\n            alpha = Math.max(alpha, score);\n            if (beta <= alpha) {\n                break;\n            }\n\n        }\n        return {score: max, best: best, evaluations: evaluations};\n    }\n    else {\n        let min = Number.POSITIVE_INFINITY;\n        for (let i=0; i < moves.length; i++) {\n            chessjs.move(moves[i]);\n            let result = alphabeta(chessjs, initialDepth, currentDepth-1, true, alpha, beta);\n            let score = result.score;\n            evaluations += result.evaluations;\n            chessjs.undo();\n\n            if (score < min) {\n                min = score;\n                best = [];\n                best.push(moves[i]);\n            }\n            /*else if (score === min) {\n                best.push(moves[i]);\n            }*/\n\n            beta = Math.min(beta, score);\n            if (beta <= alpha) {\n                break;\n            }\n        }\n        return {score: min, best: best, evaluations: evaluations};\n    }\n}\n\nfunction move_random(chessjs) {\n    const moves = chessjs.moves({verbose: true});\n    const random = moves[Math.floor(Math.random() * moves.length)];\n\n    chessjs.move({from: random.from, to: random.to, promotion: random.promotion});\n    const fen = chessjs.fen();\n    \n    return {fen: fen, from: random.from, to: random.to, san: random.san};\n}\n\nfunction move_minimax(chessjs) {\n    let result = minimax(chessjs, 3, 3, chessjs.turn() === 'w' ? true : false);\n    let best = result.best[Math.floor(Math.random() * result.best.length)];\n    \n    chessjs.move({from: best.from, to: best.to, promotion: best.promotion});\n    const fen = chessjs.fen();\n    \n    console.log(\"minimax evaluations: \" + result.evaluations);\n\n    return {fen: fen, from: best.from, to: best.to, san: best.san};    \n}\n\nfunction move_alphabeta(chessjs) {\n    let result = alphabeta(chessjs, 3, 3, chessjs.turn() === 'w' ? true : false, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n    let best = result.best[Math.floor(Math.random() * result.best.length)];\n\n    chessjs.move({from: best.from, to: best.to, promotion: best.promotion});\n    const fen = chessjs.fen();\n\n    console.log(\"alphabeta evaluations: \" + result.evaluations);\n\n    return {fen: fen, from: best.from, to: best.to, san: best.san};\n}\n\nonmessage = e => {\n    const chessjs = new Chess(e.data);\n\n    //postMessage(move_random(chessjs));\n    //postMessage(move_minimax(chessjs));\n    postMessage(move_alphabeta(chessjs));\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [314], () => (__webpack_require__(8512)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"b78506ac\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/lets-play-chess/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t512: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkchess_one_player\"] = self[\"webpackChunkchess_one_player\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(314).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["shuffle","array","currentIndex","length","randomIndex","Math","floor","random","evaluate","chessjs","values","fen","value","i","indexOf","charAt","alphabeta","initialDepth","currentDepth","maximizingPlayer","alpha","beta","best","evaluations","score","moves","verbose","max","Number","NEGATIVE_INFINITY","move","result","undo","push","min","POSITIVE_INFINITY","move_alphabeta","turn","from","to","promotion","console","log","san","onmessage","e","Chess","data","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}